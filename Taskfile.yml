# https://taskfile.dev

version: '3'

vars:
  GIT_BRANCH:
    sh: git rev-parse --abbrev-ref HEAD
  GIT_COMMIT:
    sh: git log -n 1 --format=%h
  PACKAGE: github.com/endorama/devid

tasks:
  default:
    cmds:
      - task: run

  build:
    desc: Build the project
    cmds:
      - task: build:dev

  build:dev:
    cmds:
      - |
        go build -ldflags="-s -w 
            -X {{.PACKAGE}}/internal/version.version={{.VERSION}} 
            -X {{.PACKAGE}}/internal/version.commit={{.GIT_COMMIT}}{{.GIT_DIRTY}}"
    vars:
      VERSION: "{{.GIT_BRANCH}}"
      GIT_DIRTY:
        sh: "[[ -z $(git status --porcelain) ]] || echo '-dirty'"

  check:release:
    desc: Perform multiple checks to ensure app is releaseable
    cmds:
      - task: deps
      - task: go-imports
      - task: lint
      - task: tests

  deps:
    desc: Vendor mod dependencies
    cmds:
      - go mod tidy
      - go mod verify

  deps:update:
    desc: update all deps to latest version
    cmds:
      - echo "{{.mods}}" | xargs go get -u
    vars:
      mods:
        sh: ag "\t" go.mod --no-color --no-numbers | ag --invert-match "indirect" | cut -d" " -f 1 | tr -d "\t" | sort

  go-imports:
    desc: Perform goimports
    cmds:
      - goimports -w -local {{.PACKAGE}} *.go cmd internal plugins test

  lint:
    desc: Lint go code
    cmds:
      - golangci-lint run

  run:
    desc: Build and run the web app
    cmds:
      - go run . {{.CLI_ARGS}}
    env:
      DEVID_PERSONAS_LOCATION: ./test/

  tests:
    desc: Run entire testsuite
    cmds:
      - go test -race {{.TEST_OPTS}} ./...

  tests:coverage:
    desc: Run entire testsuite
    cmds:
      - task: tests
        vars:
          TEST_OPTS: -covermode=atomic -coverprofile=coverage.out

  tests:single:
    desc: Run a single test, specify with RUN
    cmds:
      - go test -v ./... -run {{.RUN}}
